#!/usr/bin/env bash

say_message() {
  local voice=$1
  shift
  say -r 220 -v "$voice" "$@"
}

clean() {
  say_message "Paulina" "Let's clean up this mess..."
  rm -rf build > /dev/null 2>&1
}

conf() {
  say_message "Majed" "Time to configure this beast..."
  local generator=${1:-unix}
  if [ "$generator" == "ninja" ]; then
    say_message "Majed" "Ninja mode! Yaiii!"
    cmake -B build -S . -G Ninja
  else
    say_message "Majed" "Using Unix Makefiles...bleh!"
    cmake -B build -S . -G "Unix Makefiles"
  fi

  if [ $? -ne 0 ]; then
    say_message "Majed" "Nope! you messed up dude! fix it and try again!"
    exit 1
  fi
}

build() {
  say_message "Majed" "Let's see if this builds..."
  if ! cmake --build build --parallel 3; then
    say_message "Majed" "Nope! you messed up dude! fix it and try again!"
    exit 1
  fi
}

doall() {
  local generator=${1:-unix}
  say_message "Ellen" "Ok, I see...you did something wrong and now mommy has to fix it, right? ok, let me try..."
  clean
  conf "$generator"
  build
}

# Clear terminal screen and remove old log files
clear
rm -f logs/*.log > /dev/null 2>&1

case "$1" in
  clean)
    clean
    ;;
  conf)
    conf "$2"
    ;;
  build)
    build
    ;;
  doall)
    doall "$2"
    ;;
  *)
    [ ! -d "build" ] && conf "unix"
    build
    ;;
esac

say_message "Karen" "Did it build?..."
if [ $? -ne 0 ]; then
  say_message "Jester" "Nope!, That was painful dude!" &
  exit 1
else
  say_message "Karen" "Yep!,...apparently it did!" &
  exit 0
fi